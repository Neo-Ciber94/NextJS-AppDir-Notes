// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "orderByNulls"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id            String    @id @unique @default(uuid())
  title         String    @db.Text
  slug          String    @unique
  content       String?   @db.MediumText
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  isAIGenerated Boolean   @default(false)
  tags          Tag[]

  //
  createdByUserId String
  createdByUser   User         @relation(fields: [createdByUserId], references: [id])
  sharedPosts     SharedPost[]

  @@index([createdByUserId])
  @@fulltext([title, content])
}

model Tag {
  id     String @id @unique @default(uuid())
  name   String @db.TinyText
  postId String
  note   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  //
  createdByUserId String
  createdByUser   User   @relation(fields: [createdByUserId], references: [id])

  @@index([postId])
  @@index([createdByUserId])
}

model SharedPost {
  id        String   @id @unique @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([postId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  not_before               Int?
  id_token_expires_in      Int?
  profile_info             String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Tag           Tag[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
